---
import Icon from "~components/atoms/Icon.astro"
---

<theme-switcher>
	<Icon name="moon" slot="theme-dark"/>
	<Icon name="sun" slot="theme-light"/>
</theme-switcher>

<script>
const themeSwitcherTemplate = document.createElement("template")
themeSwitcherTemplate.innerHTML = `
<button type="button" role="switch" aria-live="polite" aria-checked="true" part="switch" id="theme-switcher">
	<slot name="theme-dark"></slot>
	<slot name="theme-light"></slot>
</button>
`

export class ThemeSwitcher extends HTMLElement {
	static tagName = "theme-switcher"
	static #eventName = "themechange"
	static #darkTheme = "dark"
	static #lightTheme = "light"
	static #values = [ThemeSwitcher.#darkTheme, ThemeSwitcher.#lightTheme]
	static #ariaLabels = ThemeSwitcher.#values.reduce((v, theme) => ({ ...v, [theme]: `${theme.charAt(0).toUpperCase()}${theme.substring(1)} theme`}), {})
	
	#switcher = null
	#currentTheme = window.__theme || ThemeSwitcher.#darkTheme
	#states = null
	#clickHandler = (event) => this.#switchTheme()

	constructor() {
		super()

		const shadowRoot = this.attachShadow({ mode: "open" })
		shadowRoot.append(themeSwitcherTemplate.content.cloneNode(true))

		this.#switcher = shadowRoot.querySelector(`#${ThemeSwitcher.tagName}`)
		this.#states = ThemeSwitcher.#values.reduce((v, theme) => ({ ...v, [theme]: shadowRoot.querySelector(`slot[name="theme-${theme}"]`)}), {})

		document.addEventListener(ThemeSwitcher.#eventName, (event) => {
			this.#currentTheme = event.detail.theme
			this.#updateDom()
		})
	}

	connectedCallback() {
		this.#updateDom()
		this.#switcher.addEventListener("click", this.#clickHandler)
	}

	disconnectedCallback() {
		this.#switcher.removeEventListener("click", this.#clickHandler)
	}

	#switchTheme() {
		const currentIndex = ThemeSwitcher.#values.indexOf(this.#currentTheme)
		const nextIndex = (currentIndex + 1) % ThemeSwitcher.#values.length
		const newTheme = ThemeSwitcher.#values[nextIndex]
		window.__setPreferredTheme(newTheme)
		this.#currentTheme = newTheme
		this.#updateDom()
	}

	#updateDom() {
		this.#switcher.setAttribute("aria-label", ThemeSwitcher.#ariaLabels[this.#currentTheme])
		ThemeSwitcher.#values.forEach(theme => this.#states[theme].style.display = theme === this.#currentTheme ? "revert" : "none")
	}
}

customElements.define(ThemeSwitcher.tagName, ThemeSwitcher)
</script>
