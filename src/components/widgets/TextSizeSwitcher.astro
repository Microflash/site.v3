---
import Icon from "~components/atoms/Icon.astro"
---

<text-size-switcher>
	<Icon name="text-size-regular" slot="text-size-regular"/>
	<Icon name="text-size-large" slot="text-size-large"/>
</text-size-switcher>

<script>
const textSizeSwitcherTemplate = document.createElement("template")
textSizeSwitcherTemplate.innerHTML = `
<button type="button" role="switch" aria-live="polite" aria-checked="true" part="switch" id="text-size-switcher">
	<slot name="text-size-regular"></slot>
	<slot name="text-size-large"></slot>
</button>
`

export class TextSizeSwitcher extends HTMLElement {
	static tagName = "text-size-switcher"
	static #eventName = "textsizechange"
	static #storageKey = "text-size"
	static #regularTextSize = "regular"
	static #largeTextSize = "large"
	static #values = [TextSizeSwitcher.#regularTextSize, TextSizeSwitcher.#largeTextSize]
	static #defaultValue = TextSizeSwitcher.#regularTextSize
	static #ariaLabels = TextSizeSwitcher.#values.reduce((v, textSize) => ({ ...v, [textSize]: `${textSize.charAt(0).toUpperCase()}${textSize.substring(1)} text size`}), {})

	#currentTextSize = null
	#switcher = null
	#states = null
	#clickHandler = (event) => this.#switchTextSize()

	constructor() {
		super()

		const shadowRoot = this.attachShadow({ mode: "open" })
		shadowRoot.append(textSizeSwitcherTemplate.content.cloneNode(true))

		try {
			this.#currentTextSize = localStorage.getItem(TextSizeSwitcher.#storageKey)
		} catch (e) {
			this.#currentTextSize = TextSizeSwitcher.#defaultValue
		}

		this.#switcher = shadowRoot.querySelector(`#${TextSizeSwitcher.tagName}`)
		this.#states = TextSizeSwitcher.#values.reduce((v, textSize) => ({ ...v, [textSize]: shadowRoot.querySelector(`slot[name="${TextSizeSwitcher.#storageKey}-${textSize}"]`)}), {})

		document.addEventListener(TextSizeSwitcher.#eventName, (event) => {
			this.#currentTextSize = event.detail.textSize
			this.#updateDom()
		})
	}

	connectedCallback() {
		this.#setTextSize(this.#currentTextSize || TextSizeSwitcher.#defaultValue)
		this.#switcher.addEventListener("click", this.#clickHandler)
	}

	disconnectedCallback() {
		this.#switcher.removeEventListener("click", this.#clickHandler)
	}

	#setTextSize(newTextSize) {
		this.#currentTextSize = newTextSize
		document.firstElementChild.setAttribute("data-text-size", newTextSize)
		this.#updateDom()
		this.#dispatchEvent({ textSize: this.#currentTextSize })

		try {
			localStorage.setItem(TextSizeSwitcher.#storageKey, newTextSize)
		} catch (e) {}
	}

	#switchTextSize() {
		const currentIndex = TextSizeSwitcher.#values.indexOf(this.#currentTextSize)
		const nextIndex = (currentIndex + 1) % TextSizeSwitcher.#values.length
		const newTextSize = TextSizeSwitcher.#values[nextIndex]
		this.#setTextSize(newTextSize)
	}

	#updateDom() {
		this.#switcher.setAttribute("aria-label", TextSizeSwitcher.#ariaLabels[this.#currentTextSize])
		TextSizeSwitcher.#values.forEach(textSize => this.#states[textSize].style.display = textSize === this.#currentTextSize ? "revert" : "none")
	}

	#dispatchEvent(detail) {
		this.dispatchEvent(new CustomEvent(TextSizeSwitcher.#eventName, {
			bubbles: true,
			composed: true,
			detail: detail
		}))
	}
}

customElements.define(TextSizeSwitcher.tagName, TextSizeSwitcher)
</script>
